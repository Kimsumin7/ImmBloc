798043
857 3929 2504 

비트코인, 이더리움 핵심 이론
1 비트코인 합의방식(채굴)
2 블록의 개념
3 해시 개념
4 탈중앙화 개념
5 노드 개념(풀노트)
6 스마트컨트랙트 개념

기존 프로그래밍과 스마트컨트랙트 프로그래밍 완전히 다름
1 블록체인 합의방식(이더리움 블록 12s 생성)
2 풀노드, 탈중앙화, 스마트 컨트랙트 실행 방식

솔리디티 실습

크롬 브라우저 리믹스 툴

--------------------------------------
스마트 컨트렉트 
-중단이 안됨
만들어서 배포하면 영구적으로 사라지지 않음

가스
프로그램 실행 시 비용

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.13;

contract Counter{
    //이더리움 스마트컨트랙트
    //1. 상태변수 : 블록체인에 기록할 데이터
    //2. 함수 : 상태변수를 업데이트 하는 역할

    //1. 상태변수
    uint count; //count변수 unsigend integer
    //2. 함수
    function getCount() public view returns(uint){
        return count;
    }
    //카운팅 증가하는 함수
    function incrementcount() public {
        count = count+1;
    }
}




// SPDX-License-Identifier: MIT
pragma solidity ^0.8.13;

contract Basic{
    //uint형(unsigned integer) 부호 없는 정수형
    //범위는 uint8~uint256
    //uint8 0~2^8-1, unit 2^16-1, uint256 2^256-1
    uint8 public u8 = 1;
    uint256 public u256 = 123;
    uint public u = 777;

    //int형 : 부호 있는 정수형
    //int128, -2^127~2^127-1
    int8 public i8 = -1;
    int256 public i256 = -123;
    int public i = -123; //int256이 기본값, int=int256
    
    int public minInt = type(int).min;
    int public maxInt = type(int).max;



    //bytes타입, address타입
    //주소는 20바이트 자료형
    //이더리움 계정(주소)를 만들기 위해서 설계 20바이트(160비트)
    //계약계정(Coutract address), 외부소유계정(External Owned address)
    bytes1 a = 0xb5; //10110101
    bytes1 b = 0x56; //01010110

    address public addr = 0x5B38Da6a701c568545dCfcB03FcB875f56beddC4;
}





// SPDX-License-Identifier: MIT
pragma solidity ^0.8.13;

contract Basic{
    //변수
    //1. local(지역변수) : 함수 안에 선언됨-> 블록체인에 기록되지 않음
    //2. State(상태변수) : 함수 밖에 선언됨-> 블록체인에 기록됨(영구저장)
    //3. Global(전역변수) : 블록체인에 관한 정보 제공
    //상태변수는 블록체인에 기록됨
    string public text = "Hello";
    uint public num = 123;

    function doSomething() public{
        //지역변수는 블록체인에 기록되지 않음
        uint i = 456;
        //전역변수
        uint timestamp = block.timestamp;
        address sender = msg.sender;
    }
}


// SPDX-License-Identifier: MIT
pragma solidity ^0.8.13;

contract Basic {
    // 상수: 수정될 수 없는 변수
    // 상수로 하드코딩된 값은 가스비용 절약
    // 대문자 사용을 권장
    address public constant MY_ADDRESS = 0x5B38Da6a701c568545dCfcB03FcB875f56beddC4;
    uint public constant MY_UINT = 123;

    // 불변: 생성자 안에 선언될 수 있으며, 이후 수정될 순 없음
    address public immutable MY_IM_ADDRESS;
    uint public immutable MY_IM_UINT;

    // 생성자: 컨트랙트 배포 시점에 호출됨
    constructor(uint _MyUint) {
        MY_IM_ADDRESS = msg.sender; //컨트랙트를 배포한 주소
        MY_IM_UINT = _MyUint;
    }
}



// SPDX-License-Identifier: MIT
pragma solidity ^0.8.13;

contract Basic {
    //가스/가스 가격
    //트랜잭션에 필요한 가스비?
    //사용한 가스 * 가스 가격의 이더로 트랜잭션 비용 지불
    //가스는 계산 단위
    //가스 사용량은 트랜잭션에 사용된 가스의 총 양
    //가스 가격은 가스당 지불할 이더의 양
    //가스 가격이 더 높은 트랜잭션이 먼저 처리됨
    //사용되지 않은 가스는 환불됨

    //가스 제한
    //사용될 수 있는 가스 비용에 2가지 상한선이 존재
    //-> Gas Limit: 사용자에 의해서 설정된 최대 가스 사용량에 대한 최대치
    //볼록 가스 제한 : 블록에 허용된 최대 가스양 - 네트워크에 의해서 설정됨
    //트랜잭션은 이더가 필요

    uint public  oneWei = 1 wei;
    bool public isOneWei = 1 wei == 1;
    uint public oneEther = 1 ether;
    bool public isOneEhter = 1 ether == 1e18;
}

==============================
0704
//

uint[] public arr;
function remove(uint _index) public{
 require(_index < arr.lenght, "index out of bound");
 for(uint i = _index; i<arr.lenght -1; i++){
  arr[i] = arr[i+1];
  }
  arr.pop();
}

function test() external{
 arr = [1,2,3,4,5];
 remove(2);
 assert(arr[0] == 1);
 assert(arr[1] == 2);
 assert(arr[2] == 3);
 assert(arr[3] == 4);
 assert(arr[4] == 5);
 arr = [1];
 remove(0);
 assert(arr.lenght == 0);
}

==========================================
07-05

1.상태변수-책 정보, 대출자 정보, 대출현황
uint bookinfo;
address bookborrower;
eunm BookStatus{
 borrowed,
 returned,
 lost,
 waiting
}
mapping(address => uint) public myBooks; //대출자와 북 연결정보

2. 함수
//책 대출 요청
function borrow(uint _bookinfo) public{
 myBooks[msg.sender] = _bookinfo;
 bookstatus = BookStatus.borrowed;
} 
//책 반납
function bookreturn(uint _bookinfo) public{
 if(myBooks[msg.sender] == _bookinfo){
 bookstatus = BookStatus.returned;
 }
}



// SPDX-License-Identifier: MIT
pragma solidity ^0.8.13;
contract Basic{
    // 데이터 저장공간
    // 변수는 데이터 저장위치를 명시적으로 지정하기 위해서 stroage, memory, calldata 세영역으로 구분되 선언
    // storage변수 : 상태변수(state variable) -> 블록체인에 저장
    // memory : 변수는 메모리에 존재하고 함수 호출되는 동안 사용됨
    // calldata : 함수인자(function arguments)를 포함하는 특별한 데이터 영역.
    uint[] public arr;
    mapping(uint => address) map;
    struct MyStruct{
        uint foo;
    }
    mapping(uint => MyStruct) myStructs;

    function f() public{
        // 상태변수를 활용해서 _f를 호출
        _f(arr, map, myStructs[1]);
        // 매핑으로부터 구조체를 가져오는 방법
        MyStruct storage myStruct = myStructs[1];
        // 메모리에서 구조체를 생성하는 방법
        MyStruct memory myMemStruct = MyStruct(0);
    }
    function _f(
            uint[] storage _arr,
            mapping(uint => address) storage _map,
            MyStruct storage _myStruct
    )internal{
        // 상태변수 활용해서 코딩..
    } 
}


//함수
//다양한 값을 리턴할 수 있음
function returnMany() public pure returns(uint, bool, uint){
 return(1, ture, 2);
}
furnction named() public pure returns(uint x, bool b, uint y){
 return(1, ture, 2);
}





//함수
//View: 상태 변수가 변경되지 않음(블록체인 데이터를 읽기만 하는 경우) - 기록x
//Pure : 상태변수가 변경되지 않거나, 상태변수를 읽지도 않음(블록체인 데이터를 읽지 않음)

uint public x = 1;

function addToX(uint y) pubic view returns(uint){
 return x+y;
}




Calldata vs Memory
Memory : 함수 호출시에만 존재하는 휘발성 데이터가 위치하는 곳
Calldata : call에 사용되는 데이터, 함수 호출시 인자로 포함된 데이터들이 위치한 공간
memory와 calldata의 차이점은 메모리는 수정이 가능, 콜데이터는 수정이 불가
콜데이터는 콜데이터에 포함된 데이터를 사용
메모리는 콜데이터로부터 데이터를 가져와서 별도의 카피본을 만들어서 사용
->메모리를 사용하면 콜데이터에 비해서 가스비가 더 발생
->사용시 유의점
읽기와 수정이 필요하지만 브롥체인 상태 업데이트가 필요 없는 경우
->메모리 사용
->콜데이터를 사용할 수 있으면, 콜데이터가 메모리보다 저렴, 가스비를 아낄 수 있음
콜데이터, 메모리 키워드(함수인자)->콜데이터 > 메모리



****** 가장중요
에러처리
에러가 발생하면 , 트랜잭션 중에 발생하는 모든 상태를 취소함
require, revert, assert
require: 실행전에 조건과 입력값을 확인(검증)하는데 사용됨
revert: require와 유사, gas비가 조금 더 발생(조금 더 엄격한 상황)
assert: 코드가 절대 false가 되어서는 안되는 상황을 체크
->assert가 실패면 아마도 코드에 버그가 있다 (디버깅 assert)

 - require
function testRequire(uint _i) public pure{




======================================
0708
상속***

1. 솔리디티는 다중상속을 지원, 컨트랙트는 is 키워드를 사용 다른 컨트랙트 상속
2. 자식계약에 의해서 오버라이딩 될 함수에 대한 정의->virtual키워드 사용
3. 부모함수를 오버라이딩 할 함수들은 override키워드 사용해야 함
4. 상속의 순서는 중요함(가장 가까운 부모로부터 가장 먼 부모로 차례대로 상속)
is A, B, C (A가 가장 가까운 부모)